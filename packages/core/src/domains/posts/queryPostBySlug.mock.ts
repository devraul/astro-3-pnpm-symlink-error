export const mock = [
  {
    _id: '109f864d-16c7-4f31-a934-2a3884275843',
    content: [
      {
        children: [
          {
            _type: 'span',
            marks: [],
            text: "When writing code, we may not think about how it'll behave in the test suit.",
            _key: 'fe1767decac4',
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: 'f32dbb7df0fe',
        image: null,
        markDefs: [],
      },
      {
        markDefs: [],
        children: [
          {
            text: 'One common mistake, for example, is when we have a function that relies on the Date object.',
            _key: '10fc7bfc4058',
            _type: 'span',
            marks: [],
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: '5a4a39ca54e9',
        image: null,
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '38228563d62d',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "Let's imagine a (dummy) function where we pass a date as a param and get back the difference of the years:",
            _key: '6cd56b15d406',
          },
        ],
      },
      {
        _key: 'bf1932b7379d',
        image: null,
        markDefs: null,
        code: 'export function getYearsDiff(date: Date) {\n  const now = new Date();\n  return now.getFullYear() - date.getFullYear();\n}\n\nconsole.log(getYearsDiff(new Date("2022-01-01"))); // 1',
        _type: 'code',
        language: 'ts',
      },
      {
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Because we\'re running this code in 2023, the difference between the date we\'ve passed and the "new Date()" will always be one.',
            _key: 'adcf748e47f9',
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: '978267565191',
        image: null,
        markDefs: [],
      },
      {
        children: [
          {
            _key: 'b9a57e5766f2',
            _type: 'span',
            marks: [],
            text: 'Then, we can write a test like this:',
          },
        ],
        _type: 'block',
        style: 'normal',
        image: null,
        _key: '5e796c061741',
        markDefs: [],
      },
      {
        markDefs: null,
        filename: 'getYearsDiff.spec.ts',
        _type: 'code',
        language: 'ts',
        _key: '5041d9760628',
        code: 'describe("getYearsDiff", () =\u003e {\n  it("should return the year difference between today and the sent date", () =\u003e {\n    const date = new Date("2022-01-01");\n    const result = getYearsDiff(date);\n    expect(result).toBe(1);\n  });\n});\n',
        image: null,
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '19aa51dc39d1',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'This test will pass along in the year 2023 in my CI environment with no problem. However, on 2024-01-01, my test pipeline will start failing for, apparently, no reason.',
            _key: 'a0f8cb3e7a62',
          },
        ],
        image: null,
      },
      {
        style: 'normal',
        _key: 'd25e57eb0b96',
        markDefs: [],
        image: null,
        children: [
          {
            _type: 'span',
            marks: [],
            text: "If we start investigating, we'll quickly see that ",
            _key: '8d21cfcff4cb',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'result',
            _key: 'f249caa05eb2',
          },
          {
            _type: 'span',
            marks: [],
            text: ' is no longer 1 but 2.',
            _key: '8238ba730234',
          },
        ],
        _type: 'block',
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '58e6adcce3c4',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "That's because our code relies on ",
            _key: 'c7b2babccd02',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'new Date()',
            _key: '442cd302a7aa',
          },
          {
            _type: 'span',
            marks: [],
            text: ', and this date always matches the current date.',
            _key: 'c26ee73495e4',
          },
        ],
      },
      {
        children: [
          {
            text: 'You could say:',
            _key: '6c790ae5aed3',
            _type: 'span',
            marks: [],
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: '3f6cc5d869ee',
        markDefs: [],
        image: null,
      },
      {
        _key: '770abe93a587',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: '"Ah, ok... let me fix it to be 2 instead 1"',
            _key: '03b8cde2583f',
          },
        ],
        _type: 'block',
        style: 'blockquote',
      },
      {
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "But let's be honest: this is far from an optimal solution.",
            _key: '0fb5289a0256',
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: 'ece99c393dce',
        image: null,
      },
      {
        style: 'normal',
        _key: '2367770fee6c',
        markDefs: [],
        children: [
          {
            _key: 'fa131e38fd6b',
            _type: 'span',
            marks: [],
            text: 'Not only because you have to change this particular test every new year but because your future self or teammates will have to spend some time trying to figure out why the tests suddenly stopped working.',
          },
        ],
        _type: 'block',
        image: null,
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '54dbbb4b2955',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Also, this case is simple because we can easily see that our function is using ',
            _key: '7e0582e6b062',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'new Date()',
            _key: '52b185d6ba48',
          },
          {
            text: ', but the thing is: this statement could be really nested into the tested code.',
            _key: 'd7af62579312',
            _type: 'span',
            marks: [],
          },
        ],
        image: null,
      },
      {
        style: 'normal',
        _key: '968429013ba1',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'What I mean by that is you may have written an integration test where a function calls a function that calls a bunch of other functions and this ',
            _key: '59965c842739',
          },
          {
            text: 'new Date()',
            _key: '2b893a6c59fb',
            _type: 'span',
            marks: ['highlight'],
          },
          {
            _type: 'span',
            marks: [],
            text: ' is not visible at a glance.',
            _key: '1a10d25b5b55',
          },
        ],
        _type: 'block',
        image: null,
      },
      {
        image: null,
        markDefs: null,
        _type: 'divider',
        hr: true,
        _key: 'e8f018cba706',
      },
      {
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Possible Solutions',
            _key: 'a29225cb3a8b',
          },
        ],
        _type: 'block',
        style: 'h2',
        _key: 'd72a7f9ec706',
        image: null,
        markDefs: [],
      },
      {
        style: 'normal',
        _key: '651d36235a50',
        image: null,
        markDefs: [],
        children: [
          {
            marks: [],
            text: 'There are a few possible solutions to this problem.',
            _key: 'fa5bf50d6db1',
            _type: 'span',
          },
        ],
        _type: 'block',
      },
      {
        _type: 'block',
        style: 'normal',
        image: null,
        _key: '0dc1bffb86b8',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "I'm going to show you 2 of the ones I like the most and also explain the caveats and what you must be aware of.",
            _key: '6c3c3bff3196',
          },
        ],
      },
      {
        _type: 'block',
        style: 'h3',
        _key: 'ef44a1e038e4',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: '1. The "mockdate" package',
            _key: '5807939f8393',
          },
        ],
        image: null,
      },
      {
        _key: '7c1d9eeb23ac',
        markDefs: [
          {
            blank: true,
            _type: 'link',
            href: 'https://www.npmjs.com/package/mockdate',
            _key: '95e297b62176',
          },
        ],
        children: [
          {
            text: 'One strategy for handling this problem is using a package called ',
            _key: 'dc77a9a840a8',
            _type: 'span',
            marks: [],
          },
          {
            _type: 'span',
            marks: ['95e297b62176'],
            text: 'mockdate',
            _key: '60e5fcd9b171',
          },
          { _type: 'span', marks: [], text: '.', _key: '8eaf009f3e5c' },
        ],
        _type: 'block',
        style: 'normal',
        image: null,
      },
      {
        _key: '2ed54cfafc1d',
        markDefs: [],
        children: [
          {
            text: 'This single-file package wraps the global ',
            _key: 'f4240f3ce0f8',
            _type: 'span',
            marks: [],
          },
          {
            marks: ['highlight'],
            text: 'Date',
            _key: '708347ca97ca',
            _type: 'span',
          },
          {
            text: ' object and allows us to define a specific date we want to have every time the Date.now or new Date functions are called.',
            _key: '62fc41df4d61',
            _type: 'span',
            marks: [],
          },
        ],
        image: null,
        _type: 'block',
        style: 'normal',
      },
      {
        image: null,
        markDefs: null,
        _type: 'code',
        language: 'ts',
        _key: 'a2d341d547ad',
        code: 'import MockDate from "mockdate";\n\nMockDate.set("2023-01-01");\nconsole.log(new Date()); // 2023-01-01T00:00:00.000Z\nconsole.log(Date.now()); // 1672531200000 which is our date in milliseconds',
      },
      {
        _key: 'c686f8a5e7e5',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'As you can see, when we call the method ',
            _key: 'e2426d12349f',
          },
          {
            text: '.set',
            _key: 'a1679a2cbaa6',
            _type: 'span',
            marks: ['highlight'],
          },
          {
            _type: 'span',
            marks: [],
            text: ' with the date we want, when calling the ',
            _key: '64fc7cdc5d3e',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'new Date()',
            _key: '7889f3793b2e',
          },
          { _key: '4196aa5cc566', _type: 'span', marks: [], text: ' or ' },
          {
            marks: ['highlight'],
            text: 'Date.now()',
            _key: 'a723cad30e04',
            _type: 'span',
          },
          {
            _type: 'span',
            marks: [],
            text: ", it'll return on this date.",
            _key: '1d080ad786ba',
          },
        ],
        _type: 'block',
        style: 'normal',
        image: null,
      },
      {
        children: [
          {
            _key: '9e57bf4087ef',
            _type: 'span',
            marks: [],
            text: "It's important to mention that if you create a date passing an initial time, our mock will have no effect on it:",
          },
        ],
        _type: 'block',
        image: null,
        style: 'normal',
        _key: '40e643c02b67',
        markDefs: [],
      },
      {
        language: 'ts',
        _key: 'e69a8cbed6fd',
        image: null,
        markDefs: null,
        code: 'import MockDate from "mockdate";\n\nMockDate.set("2023-01-01");\n\nconsole.log(new Date()); // 2023-01-01T00:00:00.000Z\nconsole.log(new Date("1999-12-12")); // 1999-12-12T00:00:00.000Z',
        _type: 'code',
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '52ef9ef28e76',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "Now, let's create a test for this function.",
            _key: 'e1143d9dd46a',
          },
        ],
        image: null,
      },
      {
        _key: '7cb1b0b33a38',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "It's a good practice to run a clean-up whenever we stub something in tests to avoid cross-testing side effects.",
            _key: '093cb12395a3',
          },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        _type: 'block',
        style: 'normal',
        image: null,
        _key: 'b3fa45e14845',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'So, the ',
            _key: 'b783caa7e33d',
          },
          {
            _key: '87e6354b4baf',
            _type: 'span',
            marks: ['highlight'],
            text: 'beforeAll',
          },
          {
            _type: 'span',
            marks: [],
            text: ' hook, we set the date to the one we want. In the ',
            _key: 'dab5aee92bca',
          },
          {
            marks: ['highlight'],
            text: 'afterAll',
            _key: '99ab49718cb9',
            _type: 'span',
          },
          {
            marks: [],
            text: ' hook (that will be executed after all assertions finish), we remove the mock:',
            _key: '4962c30842ff',
            _type: 'span',
          },
        ],
      },
      {
        markDefs: null,
        _key: '9fa619fc0c72',
        code: 'import MockDate from "mockdate";\n\nimport { getYearsDiff } from "./index";\n\ndescribe("getYearsDiff", () =\u003e {\n  beforeAll(() =\u003e {\n    // Freeze the new Date()/ Date.now() creation on this period\n    MockDate.set("2023-01-01");\n  });\n\n  afterAll(() =\u003e {\n    // Restore the original Date() / Date.now() behavior\n    MockDate.reset();\n  });\n\n  it("should return the year difference between today and the sent date", () =\u003e {\n    const date = new Date("2022-01-01");\n\n    const result = getYearsDiff(date);\n    expect(result).toBe(1);\n    expect(Date.now()).toBe(1);\n  });\n});\n',
        filename: 'getYearsDiff.spec.ts',
        _type: 'code',
        language: 'ts',
        image: null,
      },
      {
        _key: 'd70b96283511',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "By doing this, no matter when this test runs, we'll have the same result because we're freezing the period.",
            _key: '7183ba643c0f',
          },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        _type: 'block',
        image: null,
        style: 'h4',
        _key: 'e16f0557f835',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Setting it globally',
            _key: 'e8229c38de80',
          },
        ],
      },
      {
        style: 'normal',
        _key: '9f3ffec90c88',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Jest, Vitest, and other test frameworks allow us to specify ',
            _key: 'cd3c58e69c5a',
          },
          {
            marks: ['highlight'],
            text: 'setup files',
            _key: '2d1d7ceb6d4d',
            _type: 'span',
          },
          { _type: 'span', marks: [], text: '.', _key: 'eec84ac98347' },
        ],
        _type: 'block',
        image: null,
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '834b869b8135',
        markDefs: [],
        children: [
          {
            text: 'In a nutshell, these files are any configuration we want to do that will run ',
            _key: '7868fbe26ca4',
            _type: 'span',
            marks: [],
          },
          {
            _type: 'span',
            marks: ['strong'],
            text: 'before',
            _key: '6e0cf070f478',
          },
          {
            _type: 'span',
            marks: [],
            text: ' each test file.',
            _key: '7e92d036eec5',
          },
        ],
        image: null,
      },
      {
        _type: 'block',
        style: 'normal',
        _key: 'cda3640c343e',
        markDefs: [],
        image: null,
        children: [
          {
            _type: 'span',
            marks: [],
            text: "In that sense, we'd have to add this setup file freezing it globally on this date:",
            _key: 'b8e70dc281d0',
          },
        ],
      },
      {
        code: 'import MockDate from "mockdate";\n\n// Freeze the new Date()/ Date.now() creation on this period\nMockDate.set("2023-01-01");\n',
        filename: 'setupTest.ts',
        image: null,
        markDefs: null,
        _type: 'code',
        language: 'ts',
        _key: '9a755c89b7f8',
      },
      {
        style: 'blockquote',
        image: null,
        _key: 'f7cffead1075',
        markDefs: [
          {
            blank: true,
            _type: 'link',
            href: 'https://jestjs.io/docs/configuration#setupfiles-array',
            _key: '44d9451b38fe',
          },
          {
            blank: true,
            _type: 'link',
            href: 'https://vitest.dev/config/#setupfiles',
            _key: 'df6afb571933',
          },
          {
            blank: true,
            _type: 'link',
            href: 'https://mochajs.org/#root-hooks-are-not-global',
            _key: '2b685f347956',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Learn how to add this file: ',
            _key: '28e48dcba40b',
          },
          {
            _type: 'span',
            marks: ['44d9451b38fe'],
            text: 'Jest docs',
            _key: 'cdcf19e31e5d',
          },
          { _type: 'span', marks: [], text: ', ', _key: '6010eb02ff95' },
          {
            _type: 'span',
            marks: ['df6afb571933'],
            text: 'Vitest docs',
            _key: 'e55e514790c9',
          },
          { _key: '96e3d8247b1f', _type: 'span', marks: [], text: ', ' },
          {
            _type: 'span',
            marks: ['2b685f347956'],
            text: 'Mocha docs',
            _key: '98723489378b',
          },
        ],
        _type: 'block',
      },
      {
        _type: 'block',
        style: 'normal',
        _key: 'cd4e344375fd',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'The problem with this approach is that every single test is bound to this date.',
            _key: '98fbf6f7ce8e',
          },
        ],
        image: null,
      },
      {
        _key: '948444d145d0',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "If an engineer is testing a function that uses the Date object and they're not aware of this setup, they might spend some time trying to figure this problem out.",
            _key: '978af6cbeef9',
          },
        ],
        image: null,
        _type: 'block',
        style: 'normal',
      },
      {
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Worth to mention that they can override the date in a specific test by calling the same method ',
            _key: '1bd441ac205f',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: '.set',
            _key: '529ce65e5b13',
          },
          {
            _type: 'span',
            marks: [],
            text: ' with another date in their test, so, for this particular test, the Date will be different from the rest of the tests.',
            _key: 'c2166404d031',
          },
        ],
        _type: 'block',
        image: null,
        style: 'normal',
        _key: 'ecb6b0b5bdc1',
      },
      {
        markDefs: null,
        _key: 'eefd8e024030',
        _type: 'divider',
        hr: true,
        image: null,
      },
      {
        _type: 'block',
        style: 'h3',
        _key: 'd7c315f32cd1',
        markDefs: [],
        children: [
          {
            text: 'fakeTimers',
            _key: '99cc31dfa560',
            _type: 'span',
            marks: [],
          },
        ],
        image: null,
      },
      {
        image: null,
        _type: 'block',
        style: 'normal',
        _key: '6de2833b291f',
        markDefs: [],
        children: [
          {
            text: 'Both Jest and Vite have the concept of ',
            _key: 'b84b3be57f61',
            _type: 'span',
            marks: [],
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'fakeTimer',
            _key: '50e67d3537e7',
          },
          { text: '.', _key: '37c3dbca13e0', _type: 'span', marks: [] },
        ],
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '2c4f9f2fc9e4',
        markDefs: [],
        image: null,
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'In summary, when we use fake timers instead of real ones, the framework will replace our set/clear ',
            _key: '08dda99d7e28',
          },
          {
            text: 'timeout',
            _key: 'dcccf1212cf5',
            _type: 'span',
            marks: ['highlight'],
          },
          { _type: 'span', marks: [], text: ', ', _key: '8155d359bde3' },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'interval',
            _key: 'c9233db5ebe9',
          },
          { text: ', ', _key: '9fd46c85e682', _type: 'span', marks: [] },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'immediate',
            _key: '76322b2eb119',
          },
          { text: ', ', _key: '3dca5e0298b3', _type: 'span', marks: [] },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'tick',
            _key: '1c7e0ba3c188',
          },
          {
            _type: 'span',
            marks: [],
            text: ', and guess what? The ',
            _key: 'eb753da7ee4a',
          },
          {
            text: 'Date',
            _key: '5e125948efc2',
            _type: 'span',
            marks: ['highlight'],
          },
          {
            _type: 'span',
            marks: [],
            text: ' object.',
            _key: '5c1d83ff73e5',
          },
        ],
      },
      {
        style: 'normal',
        _key: 'fe7b77b8e778',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "This means that if we're running a code that uses a ",
            _key: '5f4cf52fbf48',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'setTimeout',
            _key: 'd0885c813597',
          },
          {
            _key: '27034ccd4998',
            _type: 'span',
            marks: [],
            text: " function, we don't need to wait until the timeout to assert against something.",
          },
        ],
        _type: 'block',
        image: null,
      },
      {
        style: 'normal',
        _key: '120f732ef36e',
        markDefs: [],
        image: null,
        children: [
          {
            marks: [],
            text: 'That said, when we use ',
            _key: 'a38dba908525',
            _type: 'span',
          },
          {
            text: 'useFakeTimers()',
            _key: 'd31f889001d8',
            _type: 'span',
            marks: ['highlight'],
          },
          {
            text: ' we have access to a bunch of methods to handle these timers.',
            _key: '31043df3c051',
            _type: 'span',
            marks: [],
          },
        ],
        _type: 'block',
      },
      {
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: " There's a function called ",
            _key: 'a03d22218962',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'setSystemTime',
            _key: '8f9984be55eb',
          },
          {
            _key: 'b72b26257e9f',
            _type: 'span',
            marks: [],
            text: ' to freeze the Date while creating a new Date with no initial date value.',
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: '3cc2ee21570d',
        image: null,
      },
      {
        _type: 'code',
        language: 'ts',
        _key: 'b3b93bbd6655',
        highlightedLines: '5',
        image: null,
        markDefs: null,
        code: 'import { getYearsDiff } from "./index";\n\ndescribe("getYearsDiff", () =\u003e {\n  it("should return the year difference between today and the sent date", () =\u003e {\n    vi.useFakeTimers().setSystemTime(new Date("2023-01-01"));\n\n    const date = new Date("2022-01-01");\n\n    const result = getYearsDiff(date);\n    expect(result).toBe(1);\n  });\n});\n',
        filename: 'getYearsDiff.spec.tsx',
      },
      {
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'This will have the exact same effect as the ',
            _key: '688c810ebced',
          },
          {
            marks: ['highlight'],
            text: 'mockdate',
            _key: 'cc892f113dec',
            _type: 'span',
          },
          { _type: 'span', marks: [], text: '. Now, ', _key: '0b30eb1ef28a' },
          {
            _key: '69053f5867df',
            _type: 'span',
            marks: ['highlight'],
            text: 'new Date()',
          },
          { _type: 'span', marks: [], text: ' and ', _key: 'b59f21142341' },
          {
            _key: '5e84bc9fc178',
            _type: 'span',
            marks: ['highlight'],
            text: 'Date.now()',
          },
          {
            text: ' will always fall back to the defined period.',
            _key: 'cb4eed3baca9',
            _type: 'span',
            marks: [],
          },
        ],
        _type: 'block',
        style: 'normal',
        _key: '7c2ec272c454',
        image: null,
      },
      {
        markDefs: [],
        children: [
          { _type: 'span', marks: [], text: 'Caveat', _key: 'fbaa7e6e7c2a' },
        ],
        _type: 'block',
        style: 'h4',
        _key: '9204665192a4',
        image: null,
      },
      {
        _key: 'c18407274e06',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'The biggest problem with this approach is that every single code that uses the functions I mentioned before (e.g., setTimeout, nextTick, etc.) may not behave as you expect.',
            _key: '8cb3d5b1984a',
          },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        markDefs: [
          {
            blank: true,
            _type: 'link',
            href: 'https://www.npmjs.com/package/@testing-library/user-event',
            _key: 'a50750856155',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'An example I can give you is a problem I faced recently with ',
            _key: '6d74a4e0c001',
          },
          {
            _type: 'span',
            marks: ['a50750856155'],
            text: '@testing-library/user-event',
            _key: 'd8822558b3d6',
          },
          { _key: '49b7fdd73e5f', _type: 'span', marks: [], text: '.' },
        ],
        _type: 'block',
        style: 'normal',
        _key: 'd66679b565b4',
        image: null,
      },
      {
        _key: 'db88fee7b11d',
        markDefs: [],
        image: null,
        children: [
          {
            _type: 'span',
            marks: [],
            text: "For those who don't know, this library is a library to help us in component testing that emulates the actual user event, such as pointers, keyboard, clipboard, etc.",
            _key: '274e1650d097',
          },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        _key: '0e399c67c34a',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'When I tried to use the fake timers, all functions that were using ',
            _key: '4d8060f512b2',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'user-event',
            _key: '34ee67caba54',
          },
          {
            _type: 'span',
            marks: [],
            text: ' to do a click, for example, started getting time outs for jest.',
            _key: 'e51deea00ee5',
          },
        ],
        image: null,
        _type: 'block',
        style: 'normal',
      },
      {
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'After digging into this problem, I figured that the ',
            _key: '7b1307993854',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'click',
            _key: '8221b7593ae8',
          },
          {
            _type: 'span',
            marks: [],
            text: ' function uses under the hood, ',
            _key: '56a637372fe9',
          },
          {
            marks: ['highlight'],
            text: 'setTimeout',
            _key: '728812d142bb',
            _type: 'span',
          },
          { text: '.', _key: 'f4eca6fdabe7', _type: 'span', marks: [] },
        ],
        _type: 'block',
        style: 'normal',
        _key: 'b032802070bc',
      },
      {
        _type: 'block',
        style: 'normal',
        _key: '10ff589e671a',
        markDefs: [],
        image: null,
        children: [
          {
            _type: 'span',
            marks: [],
            text: "Because now it's the fake one, the setTimeout callback was ",
            _key: '35e7ad499b21',
          },
          {
            _type: 'span',
            marks: ['strong'],
            text: 'never',
            _key: '0ea994038804',
          },
          {
            _type: 'span',
            marks: [],
            text: ' resolved because.',
            _key: 'cd377a1a61cf',
          },
        ],
      },
      {
        _key: 'c16f5bc5c57c',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'For resolving fake timers we have to imperatively invoke methods such as ',
            _key: 'ada3f7ee29f5',
          },
          {
            marks: ['highlight'],
            text: 'advanceTimersByTime',
            _key: '350468959671',
            _type: 'span',
          },
          { _type: 'span', marks: [], text: ', ', _key: '855c533cc8d7' },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'advanceTimersToNextTimer',
            _key: 'df01d47bde2d',
          },
          { _type: 'span', marks: [], text: ', ', _key: 'eb81882dee7c' },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'runAllTimers',
            _key: '10fd9e5153ca',
          },
          { _type: 'span', marks: [], text: ', etc.', _key: 'a95d0cc1c050' },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        style: 'normal',
        image: null,
        _key: '80708211edd6',
        markDefs: [],
        children: [
          {
            _key: 'd1677f89e5b1',
            _type: 'span',
            marks: [],
            text: 'Reading through the docs, I encountered one option that solved my problem: I could pass to the argument called ',
          },
          {
            _type: 'span',
            marks: ['highlight'],
            text: 'advanceTimers',
            _key: 'de5fdecec7d9',
          },
          {
            _type: 'span',
            marks: [],
            text: ', a function that would be called to, indeed, advance my fake timer.',
            _key: '86c20f37dd89',
          },
        ],
        _type: 'block',
      },
      {
        highlightedLines: '4',
        image: null,
        markDefs: null,
        code: "it('clicks on the element', async () =\u003e {\n  // ...code...\n  await userEvent.click(element, {\n    advanceTimers: jest.advanceTimersByTime\n  })\n  // ...code...\n})",
        _type: 'code',
        language: 'tsx',
        _key: 'c759853b5c09',
      },
      {
        _type: 'block',
        style: 'normal',
        image: null,
        _key: 'adf1aaaeac37',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'That said, you can rely on this method, but you must be ',
            _key: 'a4cacb8ac746',
          },
          {
            _type: 'span',
            marks: ['strong'],
            text: 'extra careful',
            _key: '2487ba8630e7',
          },
          {
            marks: [],
            text: ' because such problems are tough to debug.',
            _key: '6009e852a221',
            _type: 'span',
          },
        ],
      },
      {
        _key: 'd643bd7eb6b7',
        markDefs: [
          {
            blank: true,
            _type: 'link',
            href: ' https://testing-library.com/docs/using-fake-timers/',
            _key: 'ac409b7aeeac',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Testing Library has a docs with some guidance regarding fake timers which I strong recommend the reading: ',
            _key: 'c59441623abc',
          },
          {
            _type: 'span',
            marks: ['ac409b7aeeac'],
            text: 'Using Fake Timers',
            _key: '44f4b6c836e5',
          },
        ],
        _type: 'block',
        style: 'blockquote',
        image: null,
      },
      {
        _type: 'divider',
        hr: true,
        _key: '650a5ce78c5f',
        image: null,
        markDefs: null,
      },
      {
        children: [
          {
            marks: [],
            text: 'Conclusion',
            _key: '0a392a8734cc',
            _type: 'span',
          },
        ],
        _type: 'block',
        image: null,
        style: 'h2',
        _key: '88a0a537c71d',
        markDefs: [],
      },
      {
        _key: '64f1d82247e2',
        image: null,
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: "I hope now you'll be able not to be bitten by this problem.",
            _key: '083d87a635d5',
          },
        ],
        _type: 'block',
        style: 'normal',
      },
      {
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'No matter what solution you choose, handle your time-dependent functions with caution. After all, no one wants to have its tests broken every new year.',
            _key: '9faafd487dfc',
          },
        ],
        image: null,
        _type: 'block',
        style: 'normal',
        _key: '5bfc9ec2e471',
      },
      {
        _type: 'block',
        style: 'normal',
        image: null,
        _key: 'fe41f8637c84',
        markDefs: [],
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'Also, be careful with your approach. If you decide to mock them globally, discuss and warn your team about this so no one spends much time trying to figure out why the date is always the same.',
            _key: '004406d06b19',
          },
        ],
      },
      {
        hr: true,
        _key: '0aa8c8dc04ac',
        _type: 'divider',
        image: null,
        markDefs: null,
      },
      {
        children: [
          {
            _type: 'span',
            marks: [],
            text: 'References',
            _key: '95dbfaa5bc65',
          },
        ],
        _type: 'block',
        style: 'h2',
        _key: 'f41085f1fdbd',
        image: null,
        markDefs: [],
      },
      {
        children: [
          {
            _type: 'span',
            marks: ['336f26322376'],
            text: 'https://testing-library.com/docs/using-fake-timers/',
            _key: 'a10f7ab1e15c0',
          },
        ],
        level: 1,
        _type: 'block',
        style: 'normal',
        _key: '3802604fb2ab',
        listItem: 'bullet',
        image: null,
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://testing-library.com/docs/using-fake-timers/',
            _key: '336f26322376',
          },
        ],
      },
      {
        _key: 'bdd69b55238e',
        listItem: 'bullet',
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://github.com/testing-library/user-event',
            _key: 'eff4f9dcd971',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['eff4f9dcd971'],
            text: 'https://github.com/testing-library/user-event',
            _key: '4e0e358b28bd',
          },
        ],
        image: null,
        level: 1,
        _type: 'block',
        style: 'normal',
      },
      {
        children: [
          {
            text: 'https://mochajs.org/',
            _key: '7a599a4bb4a0',
            _type: 'span',
            marks: ['dbdd8eb063a4'],
          },
        ],
        level: 1,
        _type: 'block',
        style: 'normal',
        _key: 'e7db270581d1',
        listItem: 'bullet',
        image: null,
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://mochajs.org/',
            _key: 'dbdd8eb063a4',
          },
        ],
      },
      {
        image: null,
        _type: 'block',
        style: 'normal',
        _key: 'a61534e92039',
        listItem: 'bullet',
        markDefs: [
          {
            _type: 'link',
            href: 'https://vitest.dev/',
            _key: '176245677170',
            blank: false,
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['176245677170'],
            text: 'https://vitest.dev/',
            _key: '3e55a5d52f30',
          },
        ],
        level: 1,
      },
      {
        listItem: 'bullet',
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://jestjs.io/',
            _key: 'bfe1b75f9ccc',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['bfe1b75f9ccc'],
            text: 'https://jestjs.io/',
            _key: 'f3655026e27a',
          },
        ],
        image: null,
        level: 1,
        _type: 'block',
        style: 'normal',
        _key: '91450caa8cce',
      },
      {
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://www.npmjs.com/package/mockdate',
            _key: '597bf4900a30',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['597bf4900a30'],
            text: 'https://www.npmjs.com/package/mockdate',
            _key: '2019e0cace73',
          },
        ],
        level: 1,
        image: null,
        _type: 'block',
        style: 'normal',
        _key: '88338f4636dd',
        listItem: 'bullet',
      },
      {
        level: 1,
        _type: 'block',
        style: 'normal',
        _key: 'e3a9e185b5fa',
        image: null,
        listItem: 'bullet',
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now',
            _key: '9318d26580c3',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['9318d26580c3'],
            text: 'Date.now',
            _key: '1c03575e2036',
          },
        ],
      },
      {
        _type: 'block',
        style: 'normal',
        _key: 'f01eeb60baf7',
        listItem: 'bullet',
        image: null,
        markDefs: [
          {
            blank: false,
            _type: 'link',
            href: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive',
            _key: '3bd7b87fbe18',
          },
        ],
        children: [
          {
            _type: 'span',
            marks: ['3bd7b87fbe18'],
            text: 'new Date()',
            _key: '236be7523e24',
          },
        ],
        level: 1,
      },
    ],
    language: 'en',
    featuredImage: null,
    imageCaption: null,
    description:
      'Test time-dependent JavaScript functions with confidence. Learn a few tips for mocking dates in this comprehensive guide.',
    slug: 'tips-for-testing-time-dependent-javascript-functions',
    series: null,
    relatedPosts: null,
    subtitle: null,
    tags: [
      {
        _id: '447739af-1941-4214-ac0e-d5f7eeb3a218',
        name: 'Testing',
        slug: 'testing',
      },
      {
        _id: '74087cc8-2774-4aa6-b39d-15f12e457351',
        name: 'JavaScript',
        slug: 'javascript',
      },
      {
        _id: 'b22abac4-e3f7-4090-b166-3788ccab412f',
        name: 'TypeScript',
        slug: 'typescript',
      },
      {
        _id: '54ad8e7c-06bc-4b53-a9c9-4a11791cd3e8',
        name: 'Jest',
        slug: 'jest',
      },
      {
        _id: '019ba445-2006-4fd5-b346-8b879c5e2f83',
        name: 'Vitest',
        slug: 'vitest',
      },
      {
        _id: '36480ba3-a637-4196-96c5-bd382be0d64c',
        name: 'Date',
        slug: 'date',
      },
    ],
    unsplash: null,
    title: 'Tips for Testing Time-Dependent JavaScript Functions',
    publishedAt: '2023-01-09',
  },
];
